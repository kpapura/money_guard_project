{"version":3,"file":"HomeTab-95e95eed.js","sources":["../../src/components/Form/TransactionSwitcher/TransactionSwitcher.jsx","../../src/components/Form/FormFields/FormFields.jsx","../../src/helpers/addLeadingzero.js","../../src/components/Form/Form.jsx","../../src/Schemas/EditTransactionShema.js","../../src/components/Form/EditTransactionForm/EditTransactionForm.jsx","../../src/Schemas/addTransactionShema.js","../../src/components/Form/AddTransactionForm/AddTransactionForm.jsx","../../src/components/Transactions/TransactionItem/TransactionsItem.jsx","../../src/components/Transactions/TransactionsList.jsx","../../src/pages/HomeTab/HomeTab.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport styles from './TransactionSwitcher.module.css';\n\nconst TransactionSwitcher = ({ onChange }) => {\n  const [isIncome, setIsIncome] = useState(false);\n\n  const handleSwitch = () => {\n    setIsIncome(!isIncome);\n    onChange(!isIncome);\n  };\n  return (\n    <div className={styles['transaction-switcher']}>\n      <span className={isIncome ? styles.activeIncome : styles.labelIncome}>\n        Income\n      </span>\n\n      <label\n        className={`${styles.switch} ${\n          isIncome ? styles.income : styles.expense\n        }`}\n      >\n        <input type=\"checkbox\" onChange={handleSwitch} checked={!isIncome} />\n        <span className={`${styles.slider} ${styles.round}`}></span>\n      </label>\n      <span className={!isIncome ? styles.activeExpense : styles.labelExpense}>\n        Expense\n      </span>\n    </div>\n  );\n};\n\nexport default TransactionSwitcher;\n","import React from 'react';\n\nimport s from '../Form.module.css';\n\nconst FormInput = ({ name, register, errors, placeholder, className }) => {\n  return (\n    <div className={s.inputContainer}>\n      <input\n        autoComplete=\"off\"\n        className={className}\n        {...register(name)}\n        placeholder={placeholder}\n      />\n      {errors[name] && <span>{errors[name].message}</span>}\n    </div>\n  );\n};\n\nexport default FormInput;\n","\nconst addLeadingZero = number => {\n    return number < 10 ? '0' + number : number;\n};\n  \n  export const formatDate = (date)=>{\n  const year = date?.getFullYear();\n  const month = addLeadingZero(date?.getMonth() + 1);\n  const day = addLeadingZero(date?.getDate());\n  const formattedDate = `${year}-${month}-${day}`;\n  return formattedDate\n  }\n\n","import React, { useEffect, useMemo, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport Select from 'react-select';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport DatePicker from 'react-datepicker';\n\nimport TransactionSwitcher from './TransactionSwitcher/TransactionSwitcher';\nimport FormInput from './FormFields/FormFields';\n\nimport { formatDate } from '../../helpers/addLeadingzero';\n\nimport 'react-datepicker/dist/react-datepicker.css';\nimport s from './Form.module.css';\nimport sprite from '../../img/sprite.svg';\n\nexport function Form({\n  content,\n  categories,\n  toggle,\n  typeForm,\n  onDataSubmit,\n  schema,\n}) {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    setValue,\n  } = useForm({ resolver: yupResolver(schema), mode: 'onChange' });\n\n  const [selectedOption, setSelectedOption] = useState(null);\n  const [type, setType] = useState('');\n  const [startDate, setStartDate] = useState(null);\n  const [isHidden, setIsHidden] = useState(true);\n\n  useEffect(() => {\n    content ? setType(content.type) : setType('EXPENSE');\n    setValue('amount', content && +content.amount.toString().replace('-', ''));\n    setValue('comment', content && content.comment);\n    content && setStartDate(content.transactionDate);\n  }, [content, setValue]);\n\n  const categoriesValues = useMemo(() => {\n    return categories.map(({ id, name }) => {\n      return { value: id, label: name };\n    });\n  }, [categories]);\n\n  const defaultValue = useMemo(() => {\n    return categoriesValues.find(option => {\n      return content?.categoryId === option.value;\n    });\n  }, [content, categoriesValues]);\n\n  const handleChange = selectedOption => {\n    setSelectedOption(selectedOption);\n    setIsHidden(true);\n  };\n\n  const submit = data => {\n    if (\n      (typeForm === 'add' && type === 'EXPENSE' && selectedOption) ||\n      type === 'INCOME'\n    ) {\n      onDataSubmit({\n        transactionDate: startDate,\n        amount: type === 'EXPENSE' ? +`-${data.amount}` : +data.amount,\n        comment: data.comment,\n        type: type,\n        categoryId:\n          type === 'EXPENSE'\n            ? selectedOption?.value\n            : '063f1132-ba5d-42b4-951d-44011ca46262',\n      });\n    } else if (typeForm === 'add' && !selectedOption) {\n      setIsHidden(false);\n      return;\n    } else if (typeForm === 'edit') {\n      onDataSubmit({\n        transactionDate: startDate,\n        amount: type === 'EXPENSE' ? +`-${data.amount}` : +data.amount,\n        comment: data.comment,\n      });\n    }\n  };\n  const toggleTransaction = type => {\n    if (type) {\n      setType('INCOME');\n    } else {\n      setType('EXPENSE');\n    }\n  };\n  return (\n    <div className={s.container}>\n      <form className={s.formWrapper} onSubmit={handleSubmit(submit)}>\n        <h1 className={s.header}>\n          {typeForm === 'add' ? 'Add transaction' : 'Edit transaction'}\n        </h1>\n        {typeForm === 'add' ? (\n          <TransactionSwitcher onChange={toggleTransaction} />\n        ) : (\n          <div>\n            <ul className={s.checkBox}>\n              <li\n                onClick={() => {\n                  if (!(typeForm === 'edit' && type === 'EXPENSE')) {\n                    toggleTransaction(true);\n                  }\n                }}\n                className={\n                  content.type === 'INCOME' || type === 'INCOME'\n                    ? s.activeIncome\n                    : ''\n                }\n                disabled={typeForm === 'edit' && type === 'EXPENSE'}\n              >\n                {' '}\n                Income\n              </li>\n              <span>/</span>\n              <li\n                onClick={() => {\n                  if (!(typeForm === 'edit' && type === 'INCOME')) {\n                    toggleTransaction(false);\n                  }\n                }}\n                className={type === 'EXPENSE' ? s.activeExpense : ''}\n                disabled={typeForm === 'edit' && type === 'INCOME'}\n              >\n                {' '}\n                Expense{' '}\n              </li>\n            </ul>\n          </div>\n        )}\n        <div className={s.secondContainer}>\n          {type === 'EXPENSE' && (\n            <div className={s.category}>\n              <Select\n                name=\"category\"\n                className=\"react-select-container\"\n                classNamePrefix=\"react-select\"\n                options={categoriesValues}\n                placeholder=\"Select category\"\n                defaultValue={defaultValue && defaultValue}\n                onChange={handleChange}\n                isDisabled={typeForm === 'edit'}\n              />\n              <span className={!isHidden ? s.active : s.hidden}>\n                Please, choose the category\n              </span>\n            </div>\n          )}\n          <div className={s.boxDate}>\n            <FormInput\n              className={s.incomeInput}\n              name=\"amount\"\n              placeholder=\"0.00\"\n              autoComplete=\"false\"\n              errors={errors}\n              register={register}\n            />\n            <div className={s.svgBox}>\n              <DatePicker\n                className={s.customInput}\n                selected={startDate}\n                placeholderText=\"Enter the date\"\n                onChange={date => {\n                  setValue('transactionDate', date);\n                  setStartDate(formatDate(date));\n                }}\n              />\n              <svg width=\"36\" height=\"36\">\n                <use xlinkHref={`${sprite}#icon-date`} />\n              </svg>\n              {errors['transactionDate'] && (\n                <span>{errors['transactionDate'].message}</span>\n              )}\n            </div>\n          </div>\n\n          <FormInput\n            className={s.comment}\n            name=\"comment\"\n            placeholder=\"Comment\"\n            errors={errors}\n            register={register}\n          />\n\n          <div className={s.btnBox}>\n            <button className=\"modalButtonColor\">\n              {typeForm === 'add' ? 'ADD' : 'EDIT'}\n            </button>\n            <button type=\"button\" onClick={toggle} className=\"modalButton\">\n              CANCEL\n            </button>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n}\n","import * as yup from 'yup';\n\nexport const editTransactionShema = yup.object({\n  comment: yup.string().min(5, 'Give more details'),\n  transactionDate: yup.date(),\n  amount: yup\n    .number()\n    .typeError('Please enter the number')\n    .min(1, 'Number must be at least 1 character'),\n});\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { Form } from '../Form';\nimport { editTransactionThunk } from '../../../redux/transactions/operations';\nimport { editTransactionShema } from '../../../Schemas/EditTransactionShema';\n\nexport function EditTransactionForm({ categories, editContent, toggle }) {\n  const dispatch = useDispatch();\n\n  const handleSubmit = data => {\n    dispatch(\n      editTransactionThunk({ content: { ...data }, id: editContent.id })\n    );\n    toggle()\n  };\n\n  return (\n    <Form\n      schema={editTransactionShema}\n      toggle={toggle}\n      content={editContent.content}\n      categories={categories}\n      onDataSubmit={handleSubmit}\n      typeForm=\"edit\"\n    />\n  );\n}\n","import * as yup from 'yup';\n\nexport const addTransactionShema = yup.object({\n  comment: yup\n    .string()\n    .required(`Describe your transaction`)\n    .min(5, 'Give more details'),\n  transactionDate: yup.date().required('Please choose the date'),\n  amount: yup\n    .number()\n    .typeError('Please enter the number')\n    .min(1, 'Number must be at least 1 character')\n    .required('Sum is required'),\n});\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { Form } from '../Form';\nimport { addTransactionThunk } from '../../../redux/transactions/operations';\nimport { addTransactionShema } from '../../../Schemas/addTransactionShema';\n\nexport function AddTransactionForm({ categories, toggle }) {\n  const dispatch = useDispatch();\n\n  const handleSubmit = data => {\n    dispatch(addTransactionThunk(data));\n    toggle()\n  };\n  return (\n    <Form\n      schema={addTransactionShema}\n      categories={categories}\n      onDataSubmit={handleSubmit}\n      toggle={toggle}\n      typeForm=\"add\"\n    />\n  );\n}\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { useDashboard } from '../../../hooks/useDashboard';\nimport { deleteTransactionThunk } from '../../../redux/transactions/operations';\nimport { selectTransactionCategories } from '../../../redux/transactions/transactionsSlice';\n\nimport sprite from '../../../img/sprite.svg';\nimport s from './TransactionsItem.module.css';\n\nconst TransactionsItem = ({ transaction, handleEditItem }) => {\n  const { id, transactionDate, type, categoryId, comment, amount } =\n    transaction;\n\n  const { isBigScreenOrTablet, isMobile } = useDashboard();\n\n  const dispatch = useDispatch();\n  const categories = useSelector(selectTransactionCategories);\n\n  function getCategoryName(id) {\n    const category = categories.find(category => category.id === id);\n    return category ? category.name : 'Unknown Category';\n  }\n\n  const handleDeleteTransaction = () => {\n    dispatch(deleteTransactionThunk(transaction));\n  };\n\n  const signType = type.toLowerCase() === 'income' ? '+' : '-';\n\n  const transactionBorderColor =\n    type.toLowerCase() === 'income' ? s.income_border : s.expense_border;\n\n  const transactionTextColor =\n    type.toLowerCase() === 'income' ? s.income_text : s.expense_text;\n  \n  const formattedAmount = amount.toLocaleString('ru-RU', { minimumFractionDigits: 2, maximumFractionDigits: 2 });\n\n  return (\n    <>\n      {isMobile && (\n        <li\n          key={id}\n          className={`${s.transaction_item} ${transactionBorderColor}`}\n        >\n          <table className={s.transactions_table_mobile}>\n            <tbody className={s.table_body}>\n              <tr className={s.transaction_row_mobile}>\n                <td className={s.transaction_first_column}>Date</td>\n                <td>{transactionDate}</td>\n              </tr>\n              <tr className={s.transaction_row_mobile}>\n                <td className={s.transaction_first_column}>Type</td>\n                <td>{signType}</td>\n              </tr>\n              <tr className={s.transaction_row_mobile}>\n                <td className={s.transaction_first_column}>Category</td>\n                <td>{getCategoryName(categoryId)}</td>\n              </tr>\n              <tr className={s.transaction_row_mobile}>\n                <td className={s.transaction_first_column}>Comment</td>\n                <td>{comment}</td>\n              </tr>\n              <tr className={s.transaction_row_mobile}>\n                <td className={s.transaction_first_column}>Sum</td>\n                <td className={transactionTextColor}>{formattedAmount}</td>\n              </tr>\n              <tr className={s.transaction_row_mobile}>\n                <td>\n                  <button\n                    className={s.btn_delete}\n                    onClick={handleDeleteTransaction}\n                  >\n                    Delete\n                  </button>\n                </td>\n                <td>\n                  <button\n                    onClick={() =>\n                      handleEditItem(\n                        { categoryId, type, amount, comment, transactionDate },\n                        id\n                      )\n                    }\n                    className={s.btn_edit}\n                  >\n                    <svg className={s.icon_edit}>\n                      <use xlinkHref={`${sprite}#icon-edit`} />\n                    </svg>{' '}\n                    Edit\n                  </button>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </li>\n      )}\n      {isBigScreenOrTablet && (\n        <tr className={s.transaction_row}>\n          <td className={s.transaction_colum}>{transactionDate}</td>\n          <td className={s.transaction_colum} style={{ textAlign: 'center' }}>\n            {signType}\n          </td>\n          <td className={s.transaction_colum}>{getCategoryName(categoryId)}</td>\n          <td className={s.transaction_colum}>{comment}</td>\n          <td\n            className={`${s.transaction_colum} ${transactionTextColor}`}\n            style={{ textAlign: 'right' }}\n          >\n            {formattedAmount}\n          </td>\n          <td className={s.transaction_colum}>\n            <div className={s.btn_wrapper}>\n              <button\n                onClick={() =>\n                  handleEditItem(\n                    { categoryId, type, amount, comment, transactionDate },\n                    id\n                  )\n                }\n                className={s.btn_edit}\n              >\n                <svg className={s.icon_edit}>\n                  <use xlinkHref={`${sprite}#icon-edit`} />\n                </svg>\n              </button>\n              <button\n                className={s.btn_delete}\n                onClick={handleDeleteTransaction}\n              >\n                Delete\n              </button>\n            </div>\n          </td>\n        </tr>\n      )}\n    </>\n  );\n};\n\nexport default TransactionsItem;\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport Modal from '../Modal/Modal.jsx';\nimport { EditTransactionForm } from '../Form/EditTransactionForm/EditTransactionForm.jsx';\nimport { AddTransactionForm } from '../Form/AddTransactionForm/AddTransactionForm.jsx';\nimport TransactionsItem from './TransactionItem/TransactionsItem.jsx';\n\nimport { useModal } from '../../hooks/useModal.jsx';\nimport { useDashboard } from '../../hooks/useDashboard';\nimport {\n  selectTransactionCategories,\n  selectTransactions,\n} from '../../redux/transactions/transactionsSlice';\n\nimport sprite from '../../img/sprite.svg';\nimport s from './TransactionList.module.css';\n\nconst TransactionsList = () => {\n  const { isOpen, toggle } = useModal();\n  const [editContent, setEditContent] = useState('');\n\n  const transactions = useSelector(selectTransactions);\n  const categories = useSelector(selectTransactionCategories);\n\n  const { isBigScreenOrTablet, isMobile } = useDashboard();\n\n  if (isOpen) {\n    document.body.classList.add('modal-open');\n  } else {\n    document.body.classList.remove('modal-open');\n  }\n  const handleEditItem = (content, id, name) => {\n    toggle();\n    setEditContent({ content, id, name });\n    isOpen && document.body.classList.add('modal-open');\n  };\n\n  const handleAddItem = () => {\n    toggle();\n    setEditContent(null);\n  };\n\n  return (\n    <section className={s.transactions_section}>\n      <div className={s.transactions_container}>\n        {isMobile && (\n          <ul className={s.transactions_list}>\n            {transactions.length > 0 ? (\n              transactions.map(transaction => (\n                <TransactionsItem\n                  handleEditItem={handleEditItem}\n                  key={transaction.id}\n                  transaction={transaction}\n                />\n              ))\n            ) : (\n              <div className={s.empty_transactions}>No transactions</div>\n            )}\n          </ul>\n        )}\n        {isBigScreenOrTablet && (\n          <>\n            {transactions.length > 0 ? (\n              <table className={s.transactions_table}>\n                <thead>\n                  <tr className={s.transaction_row_head}>\n                    <th>Date</th>\n                    <th style={{ textAlign: 'center' }}>Type</th>\n                    <th>Category</th>\n                    <th>Comment</th>\n                    <th style={{ textAlign: 'right' }}>Sum</th>\n                    <th></th>\n                  </tr>\n                </thead>\n                <tbody className={s.table_body}>\n                  {transactions.map(transaction => (\n                    <TransactionsItem\n                      handleEditItem={handleEditItem}\n                      key={transaction.id}\n                      transaction={transaction}\n                    />\n                  ))}\n                </tbody>\n              </table>\n            ) : (\n              <>\n                <table className={s.transactions_table}>\n                  <thead>\n                    <tr className={s.transaction_row_head}>\n                      <th>Date</th>\n                      <th style={{ textAlign: 'center' }}>Type</th>\n                      <th>Category</th>\n                      <th>Comment</th>\n                      <th style={{ textAlign: 'right' }}>Sum</th>\n                      <th></th>\n                    </tr>\n                  </thead>\n                </table>\n                <div className={s.empty_transactions}>No transactions</div>\n              </>\n            )}\n          </>\n        )}\n        <button onClick={() => handleAddItem()} className={s.btn_add}>\n          {' '}\n          <svg className={s.icon_plus}>\n            <use xlinkHref={`${sprite}#icon-plus`} />\n          </svg>\n        </button>\n      </div>\n      {isOpen && (\n        <Modal closeModal={toggle}>\n          {editContent ? (\n            <EditTransactionForm\n              editContent={editContent}\n              categories={categories}\n              toggle={toggle}\n            />\n          ) : (\n            <AddTransactionForm categories={categories} toggle={toggle} />\n          )}\n        </Modal>\n      )}\n    </section>\n  );\n};\n\nexport default TransactionsList;\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport TransactionsList from '../../components/Transactions/TransactionsList';\nimport Balance from '../../components/Balance/Balance';\n\nimport { fetchTransactionsDataThunk } from '../../redux/transactions/operations';\nimport useResize from '../../hooks/useResize';\n\nconst HomeTab = () => {\n  const dispatch = useDispatch();\n\n  const screenWidth = useResize().windowWidth;\n\n  useEffect(() => {\n    dispatch(fetchTransactionsDataThunk());\n  }, [dispatch]);\n\n  return (\n    <>\n      {screenWidth < 768 && <Balance />}\n      <TransactionsList />\n    </>\n  );\n};\n\nexport default HomeTab;\n"],"names":["TransactionSwitcher","onChange","isIncome","setIsIncome","useState","handleSwitch","React","styles","FormInput","name","register","errors","placeholder","className","s","addLeadingZero","number","formatDate","date","year","month","day","Form","content","categories","toggle","typeForm","onDataSubmit","schema","handleSubmit","setValue","useForm","yupResolver","selectedOption","setSelectedOption","type","setType","startDate","setStartDate","isHidden","setIsHidden","useEffect","categoriesValues","useMemo","id","defaultValue","option","handleChange","submit","data","toggleTransaction","Select","DatePicker","sprite","editTransactionShema","yup.object","yup.string","yup.date","yup\n    .number","EditTransactionForm","editContent","dispatch","useDispatch","editTransactionThunk","addTransactionShema","yup\n    .string","AddTransactionForm","addTransactionThunk","TransactionsItem","transaction","handleEditItem","transactionDate","categoryId","comment","amount","isBigScreenOrTablet","isMobile","useDashboard","useSelector","selectTransactionCategories","getCategoryName","category","handleDeleteTransaction","deleteTransactionThunk","signType","transactionBorderColor","transactionTextColor","formattedAmount","TransactionsList","isOpen","useModal","setEditContent","transactions","selectTransactions","handleAddItem","Modal","HomeTab","screenWidth","useResize","fetchTransactionsDataThunk","Balance"],"mappings":"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"}